#!/usr/bin/env python
import os
from pathlib import Path

import ase.io
from _utils import common_argparser, construct_calc
from omegaconf import OmegaConf

from aml.common.utils import log_and_print
from aml.simulations import GeometryOptimization


def main(config):
    if config.model.path is None:
        raise ValueError("Model not specified.")
    if (logfile := Path(config.io.log)).exists():
        os.remove(logfile)

    log_and_print("====== Config ======", config.io.log)
    log_and_print(OmegaConf.to_yaml(config), config.io.log)

    # Load structure
    atoms = ase.io.read(config.io.input)
    # Load model
    calc = construct_calc(config.model, atoms.pbc)
    log_and_print(f"Device: {config.model.device}", config.io.log)
    log_and_print(f"Calculator: {calc}", config.io.log)
    atoms.calc = calc
    # Run optimization
    max_iter = config.opt.pop("max_iter", 500)
    opt = GeometryOptimization(
        atoms=atoms,
        log_file=config.io.log,
        log_interval=1,
        append_log=True,
        trajectory=config.io.trajectory,
        trajectory_interval=1,
        **config.opt,
    )
    opt.run(max_iter)
    opt.atoms.write(config.io.output)


if __name__ == "__main__":
    parser, args, unknown_args = common_argparser()

    # Load config
    script_dir = Path(__file__).parent.absolute()
    base_config_file = script_dir / "configs/opt.yaml"
    usr_config_file = Path(args.config).absolute()

    config = OmegaConf.load(base_config_file)
    if args.write_default_config:
        OmegaConf.save(config, args.config)
        exit(0)

    if usr_config_file.exists():
        config = OmegaConf.merge(config, OmegaConf.load(usr_config_file))
    config = OmegaConf.merge(config, OmegaConf.from_cli(unknown_args))

    if args.show_config:
        print(OmegaConf.to_yaml(config))
        exit(0)

    main(config)
